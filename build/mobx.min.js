/** MobX - (c) Michel Weststrate 2015, 2016 - MIT Licensed */
'use strict'
function e(e, t) {
  function n() {
    this.constructor = e
  }
  Xt(e, t),
    (e.prototype =
      null === t ? Object.create(t) : ((n.prototype = t.prototype), new n()))
}
function t(e) {
  return e.interceptors && e.interceptors.length > 0
}
function n(e, t) {
  var n = e.interceptors || (e.interceptors = [])
  return (
    n.push(t),
    _e(function() {
      var e = n.indexOf(t)
      ;-1 !== e && n.splice(e, 1)
    })
  )
}
function r(e, t) {
  var n = _t()
  try {
    var r = e.interceptors
    if (r)
      for (
        var o = 0, i = r.length;
        o < i &&
        ((t = r[o](t)),
        xe(
          !t || t.type,
          'Intercept handlers should return nothing or a change object'
        ),
        t);
        o++
      );
    return t
  } finally {
    Ot(n)
  }
}
function o(e) {
  return e.changeListeners && e.changeListeners.length > 0
}
function i(e, t) {
  var n = e.changeListeners || (e.changeListeners = [])
  return (
    n.push(t),
    _e(function() {
      var e = n.indexOf(t)
      ;-1 !== e && n.splice(e, 1)
    })
  )
}
function a(e, t) {
  var n = _t(),
    r = e.changeListeners
  if (r) {
    r = r.slice()
    for (var o = 0, i = r.length; o < i; o++) r[o](t)
    Ot(n)
  }
}
function s() {
  return !!zn.spyListeners.length
}
function u(e) {
  if (zn.spyListeners.length)
    for (var t = zn.spyListeners, n = 0, r = t.length; n < r; n++) t[n](e)
}
function c(e) {
  u(je({}, e, { spyReportStart: !0 }))
}
function l(e) {
  u(e ? je({}, e, tn) : tn)
}
function p(e) {
  return (
    zn.spyListeners.push(e),
    _e(function() {
      var t = zn.spyListeners.indexOf(e)
      ;-1 !== t && zn.spyListeners.splice(t, 1)
    })
  )
}
function f() {
  return ('function' == typeof Symbol && Symbol.iterator) || '@@iterator'
}
function h(e) {
  xe(!0 !== e[nn], 'Illegal state: cannot recycle array as iterator'),
    Ee(e, nn, !0)
  var t = -1
  return (
    Ee(e, 'next', function() {
      return (
        t++,
        { done: t >= this.length, value: t < this.length ? this[t] : void 0 }
      )
    }),
    e
  )
}
function d(e, t) {
  Ee(e, f(), t)
}
function v(e, t) {
  void 0 !== Object.setPrototypeOf
    ? Object.setPrototypeOf(e.prototype, t)
    : void 0 !== e.prototype.__proto__
      ? (e.prototype.__proto__ = t)
      : (e.prototype = t)
}
function b(e) {
  return {
    enumerable: !1,
    configurable: !1,
    get: function() {
      return this.get(e)
    },
    set: function(t) {
      this.set(e, t)
    }
  }
}
function m(e) {
  Object.defineProperty(cn.prototype, '' + e, b(e))
}
function y(e) {
  for (var t = an; t < e; t++) m(t)
  an = e
}
function g(e) {
  return Ae(e) && pn(e.$mobx)
}
function x(e) {
  return vn[e]
}
function w(e, t) {
  xe('function' == typeof t, x('m026')),
    xe(
      'string' == typeof e && e.length > 0,
      "actions should have valid names, got: '" + e + "'"
    )
  var n = function() {
    return _(e, t, this, arguments)
  }
  return (n.originalFn = t), (n.isMobxAction = !0), n
}
function _(e, t, n, r) {
  var o = O(e, t, n, r)
  try {
    return t.apply(n, r)
  } finally {
    S(o)
  }
}
function O(e, t, n, r) {
  var o = s() && !!e,
    i = 0
  if (o) {
    i = Date.now()
    var a = (r && r.length) || 0,
      u = new Array(a)
    if (a > 0) for (var l = 0; l < a; l++) u[l] = r[l]
    c({ type: 'action', name: e, fn: t, object: n, arguments: u })
  }
  var p = _t()
  return (
    at(),
    {
      prevDerivation: p,
      prevAllowStateChanges: D(!0),
      notifySpy: o,
      startTime: i
    }
  )
}
function S(e) {
  T(e.prevAllowStateChanges),
    st(),
    Ot(e.prevDerivation),
    e.notifySpy && l({ time: Date.now() - e.startTime })
}
function A(e) {
  xe(null === zn.trackingDerivation, x('m028')),
    (zn.strictMode = e),
    (zn.allowStateChanges = !e)
}
function I() {
  return zn.strictMode
}
function j(e, t) {
  var n,
    r = D(e)
  try {
    n = t()
  } finally {
    T(r)
  }
  return n
}
function D(e) {
  var t = zn.allowStateChanges
  return (zn.allowStateChanges = e), t
}
function T(e) {
  zn.allowStateChanges = e
}
function k(e, t, n, r, o) {
  function i(i, a, s, u, c) {
    if (
      (void 0 === c && (c = 0),
      xe(
        o || V(arguments),
        "This function is a decorator, but it wasn't invoked like a decorator"
      ),
      s)
    ) {
      De(i, '__mobxLazyInitializers') ||
        ke(
          i,
          '__mobxLazyInitializers',
          (i.__mobxLazyInitializers && i.__mobxLazyInitializers.slice()) || []
        )
      var l = s.value,
        p = s.initializer
      return (
        i.__mobxLazyInitializers.push(function(t) {
          e(t, a, p ? p.call(t) : l, u, s)
        }),
        {
          enumerable: r,
          configurable: !0,
          get: function() {
            return (
              !0 !== this.__mobxDidRunLazyInitializers && R(this),
              t.call(this, a)
            )
          },
          set: function(e) {
            !0 !== this.__mobxDidRunLazyInitializers && R(this),
              n.call(this, a, e)
          }
        }
      )
    }
    var f = {
      enumerable: r,
      configurable: !0,
      get: function() {
        return (
          (this.__mobxInitializedProps &&
            !0 === this.__mobxInitializedProps[a]) ||
            E(this, a, void 0, e, u, s),
          t.call(this, a)
        )
      },
      set: function(t) {
        this.__mobxInitializedProps && !0 === this.__mobxInitializedProps[a]
          ? n.call(this, a, t)
          : E(this, a, t, e, u, s)
      }
    }
    return (
      (arguments.length < 3 || (5 === arguments.length && c < 3)) &&
        Object.defineProperty(i, a, f),
      f
    )
  }
  return o
    ? function() {
        if (V(arguments)) return i.apply(null, arguments)
        var e = arguments,
          t = arguments.length
        return function(n, r, o) {
          return i(n, r, o, e, t)
        }
      }
    : i
}
function E(e, t, n, r, o, i) {
  De(e, '__mobxInitializedProps') || ke(e, '__mobxInitializedProps', {}),
    (e.__mobxInitializedProps[t] = !0),
    r(e, t, n, o, i)
}
function R(e) {
  !0 !== e.__mobxDidRunLazyInitializers &&
    e.__mobxLazyInitializers &&
    (ke(e, '__mobxDidRunLazyInitializers', !0),
    e.__mobxDidRunLazyInitializers &&
      e.__mobxLazyInitializers.forEach(function(t) {
        return t(e)
      }))
}
function V(e) {
  return (2 === e.length || 3 === e.length) && 'string' == typeof e[1]
}
function L(e) {
  return function(t, n, r) {
    if (r && 'function' == typeof r.value)
      return (
        (r.value = w(e, r.value)), (r.enumerable = !1), (r.configurable = !0), r
      )
    if (void 0 !== r && void 0 !== r.get)
      throw new Error('[mobx] action is not expected to be used with getters')
    return bn(e).apply(this, arguments)
  }
}
function P(e, t, n) {
  var r = 'string' == typeof e ? e : e.name || '<unnamed action>',
    o = 'function' == typeof e ? e : t,
    i = 'function' == typeof e ? t : n
  return (
    xe('function' == typeof o, x('m002')),
    xe(0 === o.length, x('m003')),
    xe(
      'string' == typeof r && r.length > 0,
      "actions should have valid names, got: '" + r + "'"
    ),
    _(r, o, i, void 0)
  )
}
function C(e) {
  return 'function' == typeof e && !0 === e.isMobxAction
}
function M(e, t, n) {
  var r = function() {
    return _(t, n, e, arguments)
  }
  ;(r.isMobxAction = !0), ke(e, t, r)
}
function N(e, t) {
  return e === t
}
function $(e, t) {
  return Pe(e, t)
}
function B(e, t) {
  return Me(e, t) || N(e, t)
}
function U(e, t, n) {
  function r() {
    i(s)
  }
  var o, i, a
  'string' == typeof e
    ? ((o = e), (i = t), (a = n))
    : ((o = e.name || 'Autorun@' + ye()), (i = e), (a = t)),
    xe('function' == typeof i, x('m004')),
    xe(!1 === C(i), x('m005')),
    a && (i = i.bind(a))
  var s = new Yn(o, function() {
    this.track(r)
  })
  return s.schedule(), s.getDisposer()
}
function z(e, t, n, r) {
  var o, i, a, s
  return (
    'string' == typeof e
      ? ((o = e), (i = t), (a = n), (s = r))
      : ((o = 'When@' + ye()), (i = e), (a = t), (s = n)),
    U(o, function(e) {
      if (i.call(s)) {
        e.dispose()
        var t = _t()
        a.call(s), Ot(t)
      }
    })
  )
}
function G(e, t, n, r) {
  function o() {
    a(l)
  }
  var i, a, s, u
  'string' == typeof e
    ? ((i = e), (a = t), (s = n), (u = r))
    : ((i = e.name || 'AutorunAsync@' + ye()), (a = e), (s = t), (u = n)),
    xe(!1 === C(a), x('m006')),
    void 0 === s && (s = 1),
    u && (a = a.bind(u))
  var c = !1,
    l = new Yn(i, function() {
      c ||
        ((c = !0),
        setTimeout(function() {
          ;(c = !1), l.isDisposed || l.track(o)
        }, s))
    })
  return l.schedule(), l.getDisposer()
}
function K(e, t, n) {
  function r() {
    if (!c.isDisposed) {
      var n = !1
      c.track(function() {
        var t = e(c)
        ;(n = a || !u(i, t)), (i = t)
      }),
        a && o.fireImmediately && t(i, c),
        a || !0 !== n || t(i, c),
        a && (a = !1)
    }
  }
  arguments.length > 3 && ge(x('m007')), ue(e) && ge(x('m008'))
  var o
  ;(o = 'object' == typeof n ? n : {}),
    (o.name = o.name || e.name || t.name || 'Reaction@' + ye()),
    (o.fireImmediately = !0 === n || !0 === o.fireImmediately),
    (o.delay = o.delay || 0),
    (o.compareStructural = o.compareStructural || o.struct || !1),
    (t = yn(o.name, o.context ? t.bind(o.context) : t)),
    o.context && (e = e.bind(o.context))
  var i,
    a = !0,
    s = !1,
    u = o.equals
      ? o.equals
      : o.compareStructural || o.struct ? gn.structural : gn.default,
    c = new Yn(o.name, function() {
      a || o.delay < 1
        ? r()
        : s ||
          ((s = !0),
          setTimeout(function() {
            ;(s = !1), r()
          }, o.delay))
    })
  return c.schedule(), c.getDisposer()
}
function H(e, t) {
  if (ee(e) && e.hasOwnProperty('$mobx')) return e.$mobx
  xe(Object.isExtensible(e), x('m035')),
    Ie(e) || (t = (e.constructor.name || 'ObservableObject') + '@' + ye()),
    t || (t = 'ObservableObject@' + ye())
  var n = new _n(e, t)
  return Ee(e, '$mobx', n), n
}
function W(e, t, n, r) {
  if (e.values[t] && !wn(e.values[t]))
    return (
      xe(
        'value' in n,
        'The property ' +
          t +
          ' in ' +
          e.name +
          ' is already observable, cannot redefine it as computed property'
      ),
      void (e.target[t] = n.value)
    )
  if ('value' in n)
    if (ue(n.value)) {
      var o = n.value
      J(e, t, o.initialValue, o.enhancer)
    } else
      C(n.value) && !0 === n.value.autoBind
        ? M(e.target, t, n.value.originalFn)
        : wn(n.value) ? Y(e, t, n.value) : J(e, t, n.value, r)
  else q(e, t, n.get, n.set, gn.default, !0)
}
function J(e, n, o, i) {
  if ((Ve(e.target, n), t(e))) {
    var a = r(e, { object: e.target, name: n, type: 'add', newValue: o })
    if (!a) return
    o = a.newValue
  }
  ;(o = (e.values[n] = new hn(o, i, e.name + '.' + n, !1)).value),
    Object.defineProperty(e.target, n, F(n)),
    Z(e, e.target, n, o)
}
function q(e, t, n, r, o, i) {
  i && Ve(e.target, t),
    (e.values[t] = new xn(n, e.target, o, e.name + '.' + t, r)),
    i && Object.defineProperty(e.target, t, X(t))
}
function Y(e, t, n) {
  var r = e.name + '.' + t
  ;(n.name = r),
    n.scope || (n.scope = e.target),
    (e.values[t] = n),
    Object.defineProperty(e.target, t, X(t))
}
function F(e) {
  return (
    On[e] ||
    (On[e] = {
      configurable: !0,
      enumerable: !0,
      get: function() {
        return this.$mobx.values[e].get()
      },
      set: function(t) {
        Q(this, e, t)
      }
    })
  )
}
function X(e) {
  return (
    Sn[e] ||
    (Sn[e] = {
      configurable: !0,
      enumerable: !1,
      get: function() {
        return this.$mobx.values[e].get()
      },
      set: function(t) {
        return this.$mobx.values[e].set(t)
      }
    })
  )
}
function Q(e, n, i) {
  var u = e.$mobx,
    p = u.values[n]
  if (t(u)) {
    var f = r(u, { type: 'update', object: e, name: n, newValue: i })
    if (!f) return
    i = f.newValue
  }
  if ((i = p.prepareNewValue(i)) !== fn) {
    var h = o(u),
      d = s(),
      f =
        h || d
          ? {
              type: 'update',
              object: e,
              oldValue: p.value,
              name: n,
              newValue: i
            }
          : null
    d && c(f), p.setNewValue(i), h && a(u, f), d && l()
  }
}
function Z(e, t, n, r) {
  var i = o(e),
    u = s(),
    p = i || u ? { type: 'add', object: t, name: n, newValue: r } : null
  u && c(p), i && a(e, p), u && l()
}
function ee(e) {
  return !!Ae(e) && (R(e), An(e.$mobx))
}
function te(e, t) {
  if (null === e || void 0 === e) return !1
  if (void 0 !== t) {
    if (g(e) || Pn(e)) throw new Error(x('m019'))
    if (ee(e)) {
      var n = e.$mobx
      return n.values && !!n.values[t]
    }
    return !1
  }
  return ee(e) || !!e.$mobx || en(e) || Qn(e) || wn(e)
}
function ne(e) {
  return (
    xe(!!e, ':('),
    k(
      function(t, n, r, o, i) {
        Ve(t, n), xe(!i || !i.get, x('m022')), J(H(t, void 0), n, r, e)
      },
      function(e) {
        var t = this.$mobx.values[e]
        if (void 0 !== t) return t.get()
      },
      function(e, t) {
        Q(this, e, t)
      },
      !0,
      !1
    )
  )
}
function re(e) {
  for (var t = [], n = 1; n < arguments.length; n++) t[n - 1] = arguments[n]
  return ie(e, le, t)
}
function oe(e) {
  for (var t = [], n = 1; n < arguments.length; n++) t[n - 1] = arguments[n]
  return ie(e, fe, t)
}
function ie(e, t, n) {
  xe(arguments.length >= 2, x('m014')),
    xe('object' == typeof e, x('m015')),
    xe(!Pn(e), x('m016')),
    n.forEach(function(e) {
      xe('object' == typeof e, x('m017')), xe(!te(e), x('m018'))
    })
  for (var r = H(e), o = {}, i = n.length - 1; i >= 0; i--) {
    var a = n[i]
    for (var s in a)
      if (!0 !== o[s] && De(a, s)) {
        if (((o[s] = !0), e === a && !Re(e, s))) continue
        var u = Object.getOwnPropertyDescriptor(a, s)
        W(r, s, u, t)
      }
  }
  return e
}
function ae(e) {
  if ((void 0 === e && (e = void 0), 'string' == typeof arguments[1]))
    return In.apply(null, arguments)
  if ((xe(arguments.length <= 1, x('m021')), xe(!ue(e), x('m020')), te(e)))
    return e
  var t = le(e, void 0, void 0)
  return t !== e ? t : Rn.box(e)
}
function se(e) {
  ge(
    'Expected one or two arguments to observable.' +
      e +
      '. Did you accidentally try to use observable.' +
      e +
      ' as decorator?'
  )
}
function ue(e) {
  return 'object' == typeof e && null !== e && !0 === e.isMobxModifierDescriptor
}
function ce(e, t) {
  return (
    xe(!ue(t), 'Modifiers cannot be nested'),
    { isMobxModifierDescriptor: !0, initialValue: t, enhancer: e }
  )
}
function le(e, t, n) {
  return (
    ue(e) &&
      ge(
        'You tried to assign a modifier wrapped value to a collection, please define modifiers when creating the collection, not when modifying it'
      ),
    te(e)
      ? e
      : Array.isArray(e)
        ? Rn.array(e, n)
        : Ie(e) ? Rn.object(e, n) : Be(e) ? Rn.map(e, n) : e
  )
}
function pe(e, t, n) {
  return (
    ue(e) &&
      ge(
        'You tried to assign a modifier wrapped value to a collection, please define modifiers when creating the collection, not when modifying it'
      ),
    void 0 === e || null === e
      ? e
      : ee(e) || g(e) || Pn(e)
        ? e
        : Array.isArray(e)
          ? Rn.shallowArray(e, n)
          : Ie(e)
            ? Rn.shallowObject(e, n)
            : Be(e)
              ? Rn.shallowMap(e, n)
              : ge(
                  'The shallow modifier / decorator can only used in combination with arrays, objects and maps'
                )
  )
}
function fe(e) {
  return e
}
function he(e, t, n) {
  if (Pe(e, t)) return t
  if (te(e)) return e
  if (Array.isArray(e)) return new cn(e, he, n)
  if (Be(e)) return new Ln(e, he, n)
  if (Ie(e)) {
    var r = {}
    return H(r, n), ie(r, he, [e]), r
  }
  return e
}
function de(e, t, n) {
  return Pe(e, t) ? t : e
}
function ve(e, t) {
  void 0 === t && (t = void 0), at()
  try {
    return e.apply(t)
  } finally {
    st()
  }
}
function be(e) {
  return (
    we(
      '`mobx.map` is deprecated, use `new ObservableMap` or `mobx.observable.map` instead'
    ),
    Rn.map(e)
  )
}
function me() {
  return 'undefined' != typeof window ? window : global
}
function ye() {
  return ++zn.mobxGuid
}
function ge(e, t) {
  throw (xe(!1, e, t), 'X')
}
function xe(e, t, n) {
  if (!e)
    throw new Error(
      '[mobx] Invariant failed: ' + t + (n ? " in '" + n + "'" : '')
    )
}
function we(e) {
  return (
    -1 === Mn.indexOf(e) &&
    (Mn.push(e), console.error('[mobx] Deprecated: ' + e), !0)
  )
}
function _e(e) {
  var t = !1
  return function() {
    if (!t) return (t = !0), e.apply(this, arguments)
  }
}
function Oe(e) {
  var t = []
  return (
    e.forEach(function(e) {
      ;-1 === t.indexOf(e) && t.push(e)
    }),
    t
  )
}
function Se(e, t, n) {
  return (
    void 0 === t && (t = 100),
    void 0 === n && (n = ' - '),
    e
      ? e.slice(0, t).join(n) +
        (e.length > t ? ' (... and ' + (e.length - t) + 'more)' : '')
      : ''
  )
}
function Ae(e) {
  return null !== e && 'object' == typeof e
}
function Ie(e) {
  if (null === e || 'object' != typeof e) return !1
  var t = Object.getPrototypeOf(e)
  return t === Object.prototype || null === t
}
function je() {
  for (var e = arguments[0], t = 1, n = arguments.length; t < n; t++) {
    var r = arguments[t]
    for (var o in r) De(r, o) && (e[o] = r[o])
  }
  return e
}
function De(e, t) {
  return $n.call(e, t)
}
function Te(e, t) {
  for (var n = 0; n < t.length; n++) ke(e, t[n], e[t[n]])
}
function ke(e, t, n) {
  Object.defineProperty(e, t, {
    enumerable: !1,
    writable: !0,
    configurable: !0,
    value: n
  })
}
function Ee(e, t, n) {
  Object.defineProperty(e, t, {
    enumerable: !1,
    writable: !1,
    configurable: !0,
    value: n
  })
}
function Re(e, t) {
  var n = Object.getOwnPropertyDescriptor(e, t)
  return !n || (!1 !== n.configurable && !1 !== n.writable)
}
function Ve(e, t) {
  xe(
    Re(e, t),
    "Cannot make property '" +
      t +
      "' observable, it is not configurable and writable in the target object"
  )
}
function Le(e) {
  var t = []
  for (var n in e) t.push(n)
  return t
}
function Pe(e, t) {
  if (null === e && null === t) return !0
  if (void 0 === e && void 0 === t) return !0
  if (Me(e, t)) return !0
  if ('object' != typeof e) return e === t
  var n = Ne(e),
    r = $e(e)
  if (n !== Ne(t)) return !1
  if (r !== $e(t)) return !1
  if (n) {
    if (e.length !== t.length) return !1
    for (var o = e.length - 1; o >= 0; o--) if (!Pe(e[o], t[o])) return !1
    return !0
  }
  if (r) {
    if (e.size !== t.size) return !1
    var i = !0
    return (
      e.forEach(function(e, n) {
        i = i && Pe(t.get(n), e)
      }),
      i
    )
  }
  if ('object' == typeof e && 'object' == typeof t) {
    if (null === e || null === t) return !1
    if ($e(e) && $e(t))
      return (
        e.size === t.size &&
        Pe(Rn.shallowMap(e).entries(), Rn.shallowMap(t).entries())
      )
    if (Le(e).length !== Le(t).length) return !1
    for (var a in e) {
      if (!(a in t)) return !1
      if (!Pe(e[a], t[a])) return !1
    }
    return !0
  }
  return !1
}
function Ce(e, t) {
  var n = 'isMobX' + e
  return (
    (t.prototype[n] = !0),
    function(e) {
      return Ae(e) && !0 === e[n]
    }
  )
}
function Me(e, t) {
  return 'number' == typeof e && 'number' == typeof t && isNaN(e) && isNaN(t)
}
function Ne(e) {
  return Array.isArray(e) || g(e)
}
function $e(e) {
  return Be(e) || Pn(e)
}
function Be(e) {
  return void 0 !== me().Map && e instanceof me().Map
}
function Ue(e) {
  var t
  return (
    Ie(e)
      ? (t = Object.keys(e))
      : Array.isArray(e)
        ? (t = e.map(function(e) {
            return e[0]
          }))
        : $e(e) ? (t = Array.from(e.keys())) : ge('Cannot get keys from ' + e),
    t
  )
}
function ze() {
  return ('function' == typeof Symbol && Symbol.toPrimitive) || '@@toPrimitive'
}
function Ge(e) {
  return null === e ? null : 'object' == typeof e ? '' + e : e
}
function Ke() {
  ;(Kn = !0), me().__mobxInstanceCount--
}
function He() {
  we(
    'Using `shareGlobalState` is not recommended, use peer dependencies instead. See https://github.com/mobxjs/mobx/issues/1082 for details.'
  ),
    (Gn = !0)
  var e = me(),
    t = zn
  if (e.__mobservableTrackingStack || e.__mobservableViewStack)
    throw new Error(
      '[mobx] An incompatible version of mobservable is already loaded.'
    )
  if (e.__mobxGlobal && e.__mobxGlobal.version !== t.version)
    throw new Error('[mobx] An incompatible version of mobx is already loaded.')
  e.__mobxGlobal ? (zn = e.__mobxGlobal) : (e.__mobxGlobal = t)
}
function We() {
  return zn
}
function Je() {
  zn.resetId++
  var e = new Un()
  for (var t in e) -1 === Bn.indexOf(t) && (zn[t] = e[t])
  zn.allowStateChanges = !zn.strictMode
}
function qe(e, t) {
  if ('object' == typeof e && null !== e) {
    if (g(e)) return xe(void 0 === t, x('m036')), e.$mobx.atom
    if (Pn(e)) {
      var n = e
      if (void 0 === t) return qe(n._keys)
      var r = n._data[t] || n._hasMap[t]
      return (
        xe(
          !!r,
          "the entry '" +
            t +
            "' does not exist in the observable map '" +
            Fe(e) +
            "'"
        ),
        r
      )
    }
    if ((R(e), t && !e.$mobx && e[t], ee(e))) {
      if (!t) return ge('please specify a property')
      var r = e.$mobx.values[t]
      return (
        xe(
          !!r,
          "no observable property '" +
            t +
            "' found on the observable object '" +
            Fe(e) +
            "'"
        ),
        r
      )
    }
    if (en(e) || wn(e) || Qn(e)) return e
  } else if ('function' == typeof e && Qn(e.$mobx)) return e.$mobx
  return ge('Cannot obtain atom from ' + e)
}
function Ye(e, t) {
  return (
    xe(e, 'Expecting some object'),
    void 0 !== t
      ? Ye(qe(e, t))
      : en(e) || wn(e) || Qn(e)
        ? e
        : Pn(e)
          ? e
          : (R(e),
            e.$mobx
              ? e.$mobx
              : void xe(!1, 'Cannot obtain administration from ' + e))
  )
}
function Fe(e, t) {
  var n
  return (n = void 0 !== t ? qe(e, t) : ee(e) || Pn(e) ? Ye(e) : qe(e)), n.name
}
function Xe(e, t) {
  return Qe(qe(e, t))
}
function Qe(e) {
  var t = { name: e.name }
  return (
    e.observing &&
      e.observing.length > 0 &&
      (t.dependencies = Oe(e.observing).map(Qe)),
    t
  )
}
function Ze(e, t) {
  return et(qe(e, t))
}
function et(e) {
  var t = { name: e.name }
  return tt(e) && (t.observers = nt(e).map(et)), t
}
function tt(e) {
  return e.observers && e.observers.length > 0
}
function nt(e) {
  return e.observers
}
function rt(e, t) {
  var n = e.observers.length
  n && (e.observersIndexes[t.__mapid] = n),
    (e.observers[n] = t),
    e.lowestObserverState > t.dependenciesState &&
      (e.lowestObserverState = t.dependenciesState)
}
function ot(e, t) {
  if (1 === e.observers.length) (e.observers.length = 0), it(e)
  else {
    var n = e.observers,
      r = e.observersIndexes,
      o = n.pop()
    if (o !== t) {
      var i = r[t.__mapid] || 0
      i ? (r[o.__mapid] = i) : delete r[o.__mapid], (n[i] = o)
    }
    delete r[t.__mapid]
  }
}
function it(e) {
  e.isPendingUnobservation ||
    ((e.isPendingUnobservation = !0), zn.pendingUnobservations.push(e))
}
function at() {
  zn.inBatch++
}
function st() {
  if (0 == --zn.inBatch) {
    Et()
    for (var e = zn.pendingUnobservations, t = 0; t < e.length; t++) {
      var n = e[t]
      ;(n.isPendingUnobservation = !1),
        0 === n.observers.length && n.onBecomeUnobserved()
    }
    zn.pendingUnobservations = []
  }
}
function ut(e) {
  var t = zn.trackingDerivation
  null !== t
    ? t.runId !== e.lastAccessedBy &&
      ((e.lastAccessedBy = t.runId), (t.newObserving[t.unboundDepsCount++] = e))
    : 0 === e.observers.length && it(e)
}
function ct(e) {
  if (e.lowestObserverState !== exports.IDerivationState.STALE) {
    e.lowestObserverState = exports.IDerivationState.STALE
    for (var t = e.observers, n = t.length; n--; ) {
      var r = t[n]
      r.dependenciesState === exports.IDerivationState.UP_TO_DATE &&
        (r.isTracing !== Jn.NONE && ft(r, e), r.onBecomeStale()),
        (r.dependenciesState = exports.IDerivationState.STALE)
    }
  }
}
function lt(e) {
  if (e.lowestObserverState !== exports.IDerivationState.STALE) {
    e.lowestObserverState = exports.IDerivationState.STALE
    for (var t = e.observers, n = t.length; n--; ) {
      var r = t[n]
      r.dependenciesState === exports.IDerivationState.POSSIBLY_STALE
        ? (r.dependenciesState = exports.IDerivationState.STALE)
        : r.dependenciesState === exports.IDerivationState.UP_TO_DATE &&
          (e.lowestObserverState = exports.IDerivationState.UP_TO_DATE)
    }
  }
}
function pt(e) {
  if (e.lowestObserverState === exports.IDerivationState.UP_TO_DATE) {
    e.lowestObserverState = exports.IDerivationState.POSSIBLY_STALE
    for (var t = e.observers, n = t.length; n--; ) {
      var r = t[n]
      r.dependenciesState === exports.IDerivationState.UP_TO_DATE &&
        ((r.dependenciesState = exports.IDerivationState.POSSIBLY_STALE),
        r.isTracing !== Jn.NONE && ft(r, e),
        r.onBecomeStale())
    }
  }
}
function ft(e, t) {
  if (
    (console.log(
      "[mobx.trace] '" +
        e.name +
        "' is invalidated due to a change in: '" +
        t.name +
        "'"
    ),
    e.isTracing === Jn.BREAK)
  ) {
    var n = []
    ht(Xe(e), n, 1),
      new Function(
        "debugger;\n/*\nTracing '" +
          e.name +
          "'\n\nYou are entering this break point because derivation '" +
          e.name +
          "' is being traced and '" +
          t.name +
          "' is now forcing it to update.\nJust follow the stacktrace you should now see in the devtools to see precisely what piece of your code is causing this update\nThe stackframe you are looking for is at least ~6-8 stack-frames up.\n\n" +
          (e instanceof xn ? e.derivation.toString() : '') +
          '\n\nThe dependencies for this derivation are:\n\n' +
          n.join('\n') +
          '\n*/\n    '
      )()
  }
}
function ht(e, t, n) {
  if (t.length >= 1e3) return void t.push('(and many more)')
  t.push('' + new Array(n).join('\t') + e.name),
    e.dependencies &&
      e.dependencies.forEach(function(e) {
        return ht(e, t, n + 1)
      })
}
function dt(e) {
  return e instanceof qn
}
function vt(e) {
  switch (e.dependenciesState) {
    case exports.IDerivationState.UP_TO_DATE:
      return !1
    case exports.IDerivationState.NOT_TRACKING:
    case exports.IDerivationState.STALE:
      return !0
    case exports.IDerivationState.POSSIBLY_STALE:
      for (var t = _t(), n = e.observing, r = n.length, o = 0; o < r; o++) {
        var i = n[o]
        if (wn(i)) {
          try {
            i.get()
          } catch (e) {
            return Ot(t), !0
          }
          if (e.dependenciesState === exports.IDerivationState.STALE)
            return Ot(t), !0
        }
      }
      return St(e), Ot(t), !1
  }
}
function bt() {
  return null !== zn.trackingDerivation
}
function mt(e) {
  var t = e.observers.length > 0
  zn.computationDepth > 0 && t && ge(x('m031') + e.name),
    !zn.allowStateChanges &&
      t &&
      ge(x(zn.strictMode ? 'm030a' : 'm030b') + e.name)
}
function yt(e, t, n) {
  St(e),
    (e.newObserving = new Array(e.observing.length + 100)),
    (e.unboundDepsCount = 0),
    (e.runId = ++zn.runId)
  var r = zn.trackingDerivation
  zn.trackingDerivation = e
  var o
  try {
    o = t.call(n)
  } catch (e) {
    o = new qn(e)
  }
  return (zn.trackingDerivation = r), gt(e), o
}
function gt(e) {
  for (
    var t = e.observing,
      n = (e.observing = e.newObserving),
      r = exports.IDerivationState.UP_TO_DATE,
      o = 0,
      i = e.unboundDepsCount,
      a = 0;
    a < i;
    a++
  ) {
    var s = n[a]
    0 === s.diffValue && ((s.diffValue = 1), o !== a && (n[o] = s), o++),
      s.dependenciesState > r && (r = s.dependenciesState)
  }
  for (n.length = o, e.newObserving = null, i = t.length; i--; ) {
    var s = t[i]
    0 === s.diffValue && ot(s, e), (s.diffValue = 0)
  }
  for (; o--; ) {
    var s = n[o]
    1 === s.diffValue && ((s.diffValue = 0), rt(s, e))
  }
  r !== exports.IDerivationState.UP_TO_DATE &&
    ((e.dependenciesState = r), e.onBecomeStale())
}
function xt(e) {
  var t = e.observing
  e.observing = []
  for (var n = t.length; n--; ) ot(t[n], e)
  e.dependenciesState = exports.IDerivationState.NOT_TRACKING
}
function wt(e) {
  var t = _t(),
    n = e()
  return Ot(t), n
}
function _t() {
  var e = zn.trackingDerivation
  return (zn.trackingDerivation = null), e
}
function Ot(e) {
  zn.trackingDerivation = e
}
function St(e) {
  if (e.dependenciesState !== exports.IDerivationState.UP_TO_DATE) {
    e.dependenciesState = exports.IDerivationState.UP_TO_DATE
    for (var t = e.observing, n = t.length; n--; )
      t[n].lowestObserverState = exports.IDerivationState.UP_TO_DATE
  }
}
function At(e) {
  return console.log(e), e
}
function It(e, t) {
  return (
    we('`whyRun` is deprecated in favor of `trace`'),
    (e = Dt(arguments)),
    e ? (wn(e) || Qn(e) ? At(e.whyRun()) : ge(x('m025'))) : At(x('m024'))
  )
}
function jt() {
  for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t]
  var n = !1
  'boolean' == typeof e[e.length - 1] && (n = e.pop())
  var r = Dt(e)
  if (!r)
    return ge(
      "'trace(break?)' can only be used inside a tracked computed value or a Reaction. Consider passing in the computed value or reaction explicitly"
    )
  r.isTracing === Jn.NONE &&
    console.log("[mobx.trace] '" + r.name + "' tracing enabled"),
    (r.isTracing = n ? Jn.BREAK : Jn.LOG)
}
function Dt(e) {
  switch (e.length) {
    case 0:
      return zn.trackingDerivation
    case 1:
      return qe(e[0])
    case 2:
      return qe(e[0], e[1])
  }
}
function Tt(e) {
  xe(this && this.$mobx && Qn(this.$mobx), 'Invalid `this`'),
    xe(!this.$mobx.errorHandler, 'Only one onErrorHandler can be registered'),
    (this.$mobx.errorHandler = e)
}
function kt(e) {
  return (
    zn.globalReactionErrorHandlers.push(e),
    function() {
      var t = zn.globalReactionErrorHandlers.indexOf(e)
      t >= 0 && zn.globalReactionErrorHandlers.splice(t, 1)
    }
  )
}
function Et() {
  zn.inBatch > 0 || zn.isRunningReactions || Xn(Rt)
}
function Rt() {
  zn.isRunningReactions = !0
  for (var e = zn.pendingReactions, t = 0; e.length > 0; ) {
    ++t === Fn &&
      (console.error(
        "Reaction doesn't converge to a stable state after " +
          Fn +
          ' iterations. Probably there is a cycle in the reactive function: ' +
          e[0]
      ),
      e.splice(0))
    for (var n = e.splice(0), r = 0, o = n.length; r < o; r++)
      n[r].runReaction()
  }
  zn.isRunningReactions = !1
}
function Vt(e) {
  var t = Xn
  Xn = function(n) {
    return e(function() {
      return t(n)
    })
  }
}
function Lt(e) {
  return we('asReference is deprecated, use observable.ref instead'), Rn.ref(e)
}
function Pt(e) {
  return (
    we(
      'asStructure is deprecated. Use observable.struct, computed.struct or reaction options instead.'
    ),
    Rn.struct(e)
  )
}
function Ct(e) {
  return (
    we('asFlat is deprecated, use observable.shallow instead'), Rn.shallow(e)
  )
}
function Mt(e) {
  return (
    we(
      'asMap is deprecated, use observable.map or observable.shallowMap instead'
    ),
    Rn.map(e || {})
  )
}
function Nt(e) {
  return k(
    function(t, n, r, o, i) {
      xe(void 0 !== i, x('m009')),
        xe('function' == typeof i.get, x('m010')),
        q(H(t, ''), n, i.get, i.set, e, !1)
    },
    function(e) {
      var t = this.$mobx.values[e]
      if (void 0 !== t) return t.get()
    },
    function(e, t) {
      this.$mobx.values[e].set(t)
    },
    !1,
    !1
  )
}
function $t(e, t) {
  if (null === e || void 0 === e) return !1
  if (void 0 !== t) {
    if (!1 === ee(e)) return !1
    if (!e.$mobx.values[t]) return !1
    var n = qe(e, t)
    return wn(n)
  }
  return wn(e)
}
function Bt(e, t, n, r) {
  return 'function' == typeof n ? zt(e, t, n, r) : Ut(e, t, n)
}
function Ut(e, t, n) {
  return Ye(e).observe(t, n)
}
function zt(e, t, n, r) {
  return Ye(e, t).observe(n, r)
}
function Gt(e, t, n) {
  return 'function' == typeof n ? Ht(e, t, n) : Kt(e, t)
}
function Kt(e, t) {
  return Ye(e).intercept(t)
}
function Ht(e, t, n) {
  return Ye(e, t).intercept(n)
}
function Wt(e, t) {
  return bt() || console.warn(x('m013')), tr(e, { context: t }).get()
}
function Jt(e, t, n) {
  function r(r) {
    return t && n.push([e, r]), r
  }
  if ((void 0 === t && (t = !0), void 0 === n && (n = []), te(e))) {
    if ((t && null === n && (n = []), t && null !== e && 'object' == typeof e))
      for (var o = 0, i = n.length; o < i; o++)
        if (n[o][0] === e) return n[o][1]
    if (g(e)) {
      var a = r([]),
        s = e.map(function(e) {
          return Jt(e, t, n)
        })
      a.length = s.length
      for (var o = 0, i = s.length; o < i; o++) a[o] = s[o]
      return a
    }
    if (ee(e)) {
      var a = r({})
      for (var u in e) a[u] = Jt(e[u], t, n)
      return a
    }
    if (Pn(e)) {
      var c = r({})
      return (
        e.forEach(function(e, r) {
          return (c[r] = Jt(e, t, n))
        }),
        c
      )
    }
    if (dn(e)) return Jt(e.get(), t, n)
  }
  return e
}
function qt(t, n) {
  xe(
    'function' == typeof t && t.length < 2,
    'createTransformer expects a function that accepts one argument'
  )
  var r = {},
    o = zn.resetId,
    i = (function(o) {
      function i(e, n) {
        var r =
          o.call(
            this,
            function() {
              return t(n)
            },
            void 0,
            gn.default,
            'Transformer-' + t.name + '-' + e,
            void 0
          ) || this
        return (r.sourceIdentifier = e), (r.sourceObject = n), r
      }
      return (
        e(i, o),
        (i.prototype.onBecomeUnobserved = function() {
          var e = this.value
          o.prototype.onBecomeUnobserved.call(this),
            delete r[this.sourceIdentifier],
            n && n(e, this.sourceObject)
        }),
        i
      )
    })(xn)
  return function(e) {
    o !== zn.resetId && ((r = {}), (o = zn.resetId))
    var t = Yt(e),
      n = r[t]
    return n ? n.get() : ((n = r[t] = new i(t, e)), n.get())
  }
}
function Yt(e) {
  if ('string' == typeof e || 'number' == typeof e) return e
  if (null === e || 'object' != typeof e)
    throw new Error(
      '[mobx] transform expected some kind of object or primitive value, got: ' +
        e
    )
  var t = e.$transformId
  return void 0 === t && ((t = ye()), ke(e, '$transformId', t)), t
}
function Ft(e, t, n) {
  var r
  if (Pn(e) || g(e) || dn(e)) r = Ye(e)
  else {
    if (!ee(e))
      return ge('Expected observable map, object or array as first array')
    if ('string' != typeof t)
      return ge(
        'InterceptReads can only be used with a specific property, not with an object in general'
      )
    r = Ye(e, t)
  }
  return void 0 !== r.dehancer
    ? ge('An intercept reader was already established')
    : ((r.dehancer = 'function' == typeof t ? t : n),
      function() {
        r.dehancer = void 0
      })
}
Object.defineProperty(exports, '__esModule', { value: !0 })
var Xt =
    Object.setPrototypeOf ||
    ({ __proto__: [] } instanceof Array &&
      function(e, t) {
        e.__proto__ = t
      }) ||
    function(e, t) {
      for (var n in t) t.hasOwnProperty(n) && (e[n] = t[n])
    },
  Qt = (function() {
    function e(e) {
      void 0 === e && (e = 'Atom@' + ye()),
        (this.name = e),
        (this.isPendingUnobservation = !0),
        (this.observers = []),
        (this.observersIndexes = {}),
        (this.diffValue = 0),
        (this.lastAccessedBy = 0),
        (this.lowestObserverState = exports.IDerivationState.NOT_TRACKING)
    }
    return (
      (e.prototype.onBecomeUnobserved = function() {}),
      (e.prototype.reportObserved = function() {
        ut(this)
      }),
      (e.prototype.reportChanged = function() {
        at(), ct(this), st()
      }),
      (e.prototype.toString = function() {
        return this.name
      }),
      e
    )
  })(),
  Zt = (function(t) {
    function n(e, n, r) {
      void 0 === e && (e = 'Atom@' + ye()),
        void 0 === n && (n = Nn),
        void 0 === r && (r = Nn)
      var o = t.call(this, e) || this
      return (
        (o.name = e),
        (o.onBecomeObservedHandler = n),
        (o.onBecomeUnobservedHandler = r),
        (o.isPendingUnobservation = !1),
        (o.isBeingTracked = !1),
        o
      )
    }
    return (
      e(n, t),
      (n.prototype.reportObserved = function() {
        return (
          at(),
          t.prototype.reportObserved.call(this),
          this.isBeingTracked ||
            ((this.isBeingTracked = !0), this.onBecomeObservedHandler()),
          st(),
          !!zn.trackingDerivation
        )
      }),
      (n.prototype.onBecomeUnobserved = function() {
        ;(this.isBeingTracked = !1), this.onBecomeUnobservedHandler()
      }),
      n
    )
  })(Qt),
  en = Ce('Atom', Qt),
  tn = { spyReportEnd: !0 },
  nn = '__$$iterating',
  rn = 1e4,
  on = (function() {
    var e = !1,
      t = {}
    return (
      Object.defineProperty(t, '0', {
        set: function() {
          e = !0
        }
      }),
      (Object.create(t)[0] = 1),
      !1 === e
    )
  })(),
  an = 0,
  sn = (function() {
    function e() {}
    return e
  })()
v(sn, Array.prototype),
  Object.isFrozen(Array) &&
    [
      'constructor',
      'push',
      'shift',
      'concat',
      'pop',
      'unshift',
      'replace',
      'find',
      'findIndex',
      'splice',
      'reverse',
      'sort'
    ].forEach(function(e) {
      Object.defineProperty(sn.prototype, e, {
        configurable: !0,
        writable: !0,
        value: Array.prototype[e]
      })
    })
var un = (function() {
    function e(e, t, n, r) {
      ;(this.array = n),
        (this.owned = r),
        (this.values = []),
        (this.lastKnownLength = 0),
        (this.interceptors = null),
        (this.changeListeners = null),
        (this.atom = new Qt(e || 'ObservableArray@' + ye())),
        (this.enhancer = function(n, r) {
          return t(n, r, e + '[..]')
        })
    }
    return (
      (e.prototype.dehanceValue = function(e) {
        return void 0 !== this.dehancer ? this.dehancer(e) : e
      }),
      (e.prototype.dehanceValues = function(e) {
        return void 0 !== this.dehancer ? e.map(this.dehancer) : e
      }),
      (e.prototype.intercept = function(e) {
        return n(this, e)
      }),
      (e.prototype.observe = function(e, t) {
        return (
          void 0 === t && (t = !1),
          t &&
            e({
              object: this.array,
              type: 'splice',
              index: 0,
              added: this.values.slice(),
              addedCount: this.values.length,
              removed: [],
              removedCount: 0
            }),
          i(this, e)
        )
      }),
      (e.prototype.getArrayLength = function() {
        return this.atom.reportObserved(), this.values.length
      }),
      (e.prototype.setArrayLength = function(e) {
        if ('number' != typeof e || e < 0)
          throw new Error('[mobx.array] Out of range: ' + e)
        var t = this.values.length
        if (e !== t)
          if (e > t) {
            for (var n = new Array(e - t), r = 0; r < e - t; r++) n[r] = void 0
            this.spliceWithArray(t, 0, n)
          } else this.spliceWithArray(e, t - e)
      }),
      (e.prototype.updateArrayLength = function(e, t) {
        if (e !== this.lastKnownLength)
          throw new Error(
            '[mobx] Modification exception: the internal structure of an observable array was changed. Did you use peek() to change it?'
          )
        ;(this.lastKnownLength += t), t > 0 && e + t + 1 > an && y(e + t + 1)
      }),
      (e.prototype.spliceWithArray = function(e, n, o) {
        var i = this
        mt(this.atom)
        var a = this.values.length
        if (
          (void 0 === e
            ? (e = 0)
            : e > a ? (e = a) : e < 0 && (e = Math.max(0, a + e)),
          (n =
            1 === arguments.length
              ? a - e
              : void 0 === n || null === n
                ? 0
                : Math.max(0, Math.min(n, a - e))),
          void 0 === o && (o = []),
          t(this))
        ) {
          var s = r(this, {
            object: this.array,
            type: 'splice',
            index: e,
            removedCount: n,
            added: o
          })
          if (!s) return Cn
          ;(n = s.removedCount), (o = s.added)
        }
        o = o.map(function(e) {
          return i.enhancer(e, void 0)
        })
        var u = o.length - n
        this.updateArrayLength(a, u)
        var c = this.spliceItemsIntoValues(e, n, o)
        return (
          (0 === n && 0 === o.length) || this.notifyArraySplice(e, o, c),
          this.dehanceValues(c)
        )
      }),
      (e.prototype.spliceItemsIntoValues = function(e, t, n) {
        if (n.length < rn)
          return (o = this.values).splice.apply(o, [e, t].concat(n))
        var r = this.values.slice(e, e + t)
        return (
          (this.values = this.values
            .slice(0, e)
            .concat(n, this.values.slice(e + t))),
          r
        )
        var o
      }),
      (e.prototype.notifyArrayChildUpdate = function(e, t, n) {
        var r = !this.owned && s(),
          i = o(this),
          u =
            i || r
              ? {
                  object: this.array,
                  type: 'update',
                  index: e,
                  newValue: t,
                  oldValue: n
                }
              : null
        r && c(u), this.atom.reportChanged(), i && a(this, u), r && l()
      }),
      (e.prototype.notifyArraySplice = function(e, t, n) {
        var r = !this.owned && s(),
          i = o(this),
          u =
            i || r
              ? {
                  object: this.array,
                  type: 'splice',
                  index: e,
                  removed: n,
                  added: t,
                  removedCount: n.length,
                  addedCount: t.length
                }
              : null
        r && c(u), this.atom.reportChanged(), i && a(this, u), r && l()
      }),
      e
    )
  })(),
  cn = (function(n) {
    function o(e, t, r, o) {
      void 0 === r && (r = 'ObservableArray@' + ye()), void 0 === o && (o = !1)
      var i = n.call(this) || this,
        a = new un(r, t, i, o)
      return (
        Ee(i, '$mobx', a),
        e && e.length && i.spliceWithArray(0, 0, e),
        on && Object.defineProperty(a.array, '0', ln),
        i
      )
    }
    return (
      e(o, n),
      (o.prototype.intercept = function(e) {
        return this.$mobx.intercept(e)
      }),
      (o.prototype.observe = function(e, t) {
        return void 0 === t && (t = !1), this.$mobx.observe(e, t)
      }),
      (o.prototype.clear = function() {
        return this.splice(0)
      }),
      (o.prototype.concat = function() {
        for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t]
        return (
          this.$mobx.atom.reportObserved(),
          Array.prototype.concat.apply(
            this.peek(),
            e.map(function(e) {
              return g(e) ? e.peek() : e
            })
          )
        )
      }),
      (o.prototype.replace = function(e) {
        return this.$mobx.spliceWithArray(0, this.$mobx.values.length, e)
      }),
      (o.prototype.toJS = function() {
        return this.slice()
      }),
      (o.prototype.toJSON = function() {
        return this.toJS()
      }),
      (o.prototype.peek = function() {
        return (
          this.$mobx.atom.reportObserved(),
          this.$mobx.dehanceValues(this.$mobx.values)
        )
      }),
      (o.prototype.find = function(e, t, n) {
        void 0 === n && (n = 0)
        var r = this.findIndex.apply(this, arguments)
        return -1 === r ? void 0 : this.get(r)
      }),
      (o.prototype.findIndex = function(e, t, n) {
        void 0 === n && (n = 0)
        for (var r = this.peek(), o = r.length, i = n; i < o; i++)
          if (e.call(t, r[i], i, this)) return i
        return -1
      }),
      (o.prototype.splice = function(e, t) {
        for (var n = [], r = 2; r < arguments.length; r++)
          n[r - 2] = arguments[r]
        switch (arguments.length) {
          case 0:
            return []
          case 1:
            return this.$mobx.spliceWithArray(e)
          case 2:
            return this.$mobx.spliceWithArray(e, t)
        }
        return this.$mobx.spliceWithArray(e, t, n)
      }),
      (o.prototype.spliceWithArray = function(e, t, n) {
        return this.$mobx.spliceWithArray(e, t, n)
      }),
      (o.prototype.push = function() {
        for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t]
        var n = this.$mobx
        return n.spliceWithArray(n.values.length, 0, e), n.values.length
      }),
      (o.prototype.pop = function() {
        return this.splice(Math.max(this.$mobx.values.length - 1, 0), 1)[0]
      }),
      (o.prototype.shift = function() {
        return this.splice(0, 1)[0]
      }),
      (o.prototype.unshift = function() {
        for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t]
        var n = this.$mobx
        return n.spliceWithArray(0, 0, e), n.values.length
      }),
      (o.prototype.reverse = function() {
        var e = this.slice()
        return e.reverse.apply(e, arguments)
      }),
      (o.prototype.sort = function(e) {
        var t = this.slice()
        return t.sort.apply(t, arguments)
      }),
      (o.prototype.remove = function(e) {
        var t = this.$mobx.dehanceValues(this.$mobx.values).indexOf(e)
        return t > -1 && (this.splice(t, 1), !0)
      }),
      (o.prototype.move = function(e, t) {
        function n(e) {
          if (e < 0)
            throw new Error(
              '[mobx.array] Index out of bounds: ' + e + ' is negative'
            )
          var t = this.$mobx.values.length
          if (e >= t)
            throw new Error(
              '[mobx.array] Index out of bounds: ' +
                e +
                ' is not smaller than ' +
                t
            )
        }
        if ((n.call(this, e), n.call(this, t), e !== t)) {
          var r,
            o = this.$mobx.values
          ;(r =
            e < t
              ? o
                  .slice(0, e)
                  .concat(o.slice(e + 1, t + 1), [o[e]], o.slice(t + 1))
              : o.slice(0, t).concat([o[e]], o.slice(t, e), o.slice(e + 1))),
            this.replace(r)
        }
      }),
      (o.prototype.get = function(e) {
        var t = this.$mobx
        if (t) {
          if (e < t.values.length)
            return t.atom.reportObserved(), t.dehanceValue(t.values[e])
          console.warn(
            '[mobx.array] Attempt to read an array index (' +
              e +
              ') that is out of bounds (' +
              t.values.length +
              '). Please check length first. Out of bound indices will not be tracked by MobX'
          )
        }
      }),
      (o.prototype.set = function(e, n) {
        var o = this.$mobx,
          i = o.values
        if (e < i.length) {
          mt(o.atom)
          var a = i[e]
          if (t(o)) {
            var s = r(o, {
              type: 'update',
              object: this,
              index: e,
              newValue: n
            })
            if (!s) return
            n = s.newValue
          }
          n = o.enhancer(n, a)
          n !== a && ((i[e] = n), o.notifyArrayChildUpdate(e, n, a))
        } else {
          if (e !== i.length)
            throw new Error(
              '[mobx.array] Index out of bounds, ' +
                e +
                ' is larger than ' +
                i.length
            )
          o.spliceWithArray(e, 0, [n])
        }
      }),
      o
    )
  })(sn)
d(cn.prototype, function() {
  return h(this.slice())
}),
  Object.defineProperty(cn.prototype, 'length', {
    enumerable: !1,
    configurable: !0,
    get: function() {
      return this.$mobx.getArrayLength()
    },
    set: function(e) {
      this.$mobx.setArrayLength(e)
    }
  }),
  [
    'every',
    'filter',
    'forEach',
    'indexOf',
    'join',
    'lastIndexOf',
    'map',
    'reduce',
    'reduceRight',
    'slice',
    'some',
    'toString',
    'toLocaleString'
  ].forEach(function(e) {
    var t = Array.prototype[e]
    xe(
      'function' == typeof t,
      "Base function not defined on Array prototype: '" + e + "'"
    ),
      ke(cn.prototype, e, function() {
        return t.apply(this.peek(), arguments)
      })
  }),
  Te(cn.prototype, [
    'constructor',
    'intercept',
    'observe',
    'clear',
    'concat',
    'get',
    'replace',
    'toJS',
    'toJSON',
    'peek',
    'find',
    'findIndex',
    'splice',
    'spliceWithArray',
    'push',
    'pop',
    'set',
    'shift',
    'unshift',
    'reverse',
    'sort',
    'remove',
    'move',
    'toString',
    'toLocaleString'
  ])
var ln = b(0)
y(1e3)
var pn = Ce('ObservableArrayAdministration', un),
  fn = {},
  hn = (function(p) {
    function f(e, t, n, r) {
      void 0 === n && (n = 'ObservableValue@' + ye()), void 0 === r && (r = !0)
      var o = p.call(this, n) || this
      return (
        (o.enhancer = t),
        (o.hasUnreportedChange = !1),
        (o.dehancer = void 0),
        (o.value = t(e, void 0, n)),
        r && s() && u({ type: 'create', object: o, newValue: o.value }),
        o
      )
    }
    return (
      e(f, p),
      (f.prototype.dehanceValue = function(e) {
        return void 0 !== this.dehancer ? this.dehancer(e) : e
      }),
      (f.prototype.set = function(e) {
        var t = this.value
        if ((e = this.prepareNewValue(e)) !== fn) {
          var n = s()
          n && c({ type: 'update', object: this, newValue: e, oldValue: t }),
            this.setNewValue(e),
            n && l()
        }
      }),
      (f.prototype.prepareNewValue = function(e) {
        if ((mt(this), t(this))) {
          var n = r(this, { object: this, type: 'update', newValue: e })
          if (!n) return fn
          e = n.newValue
        }
        return (
          (e = this.enhancer(e, this.value, this.name)),
          this.value !== e ? e : fn
        )
      }),
      (f.prototype.setNewValue = function(e) {
        var t = this.value
        ;(this.value = e),
          this.reportChanged(),
          o(this) &&
            a(this, { type: 'update', object: this, newValue: e, oldValue: t })
      }),
      (f.prototype.get = function() {
        return this.reportObserved(), this.dehanceValue(this.value)
      }),
      (f.prototype.intercept = function(e) {
        return n(this, e)
      }),
      (f.prototype.observe = function(e, t) {
        return (
          t &&
            e({
              object: this,
              type: 'update',
              newValue: this.value,
              oldValue: void 0
            }),
          i(this, e)
        )
      }),
      (f.prototype.toJSON = function() {
        return this.get()
      }),
      (f.prototype.toString = function() {
        return this.name + '[' + this.value + ']'
      }),
      (f.prototype.valueOf = function() {
        return Ge(this.get())
      }),
      f
    )
  })(Qt)
hn.prototype[ze()] = hn.prototype.valueOf
var dn = Ce('ObservableValue', hn),
  vn = {
    m001: 'It is not allowed to assign new values to @action fields',
    m002: '`runInAction` expects a function',
    m003: '`runInAction` expects a function without arguments',
    m004: 'autorun expects a function',
    m005:
      'Warning: attempted to pass an action to autorun. Actions are untracked and will not trigger on state changes. Use `reaction` or wrap only your state modification code in an action.',
    m006:
      'Warning: attempted to pass an action to autorunAsync. Actions are untracked and will not trigger on state changes. Use `reaction` or wrap only your state modification code in an action.',
    m007:
      'reaction only accepts 2 or 3 arguments. If migrating from MobX 2, please provide an options object',
    m008:
      'wrapping reaction expression in `asReference` is no longer supported, use options object instead',
    m009:
      "@computed can only be used on getter functions, like: '@computed get myProps() { return ...; }'. It looks like it was used on a property.",
    m010:
      "@computed can only be used on getter functions, like: '@computed get myProps() { return ...; }'",
    m011:
      "First argument to `computed` should be an expression. If using computed as decorator, don't pass it arguments",
    m012: 'computed takes one or two arguments if used as function',
    m013:
      "[mobx.expr] 'expr' should only be used inside other reactive functions.",
    m014: 'extendObservable expected 2 or more arguments',
    m015: 'extendObservable expects an object as first argument',
    m016: 'extendObservable should not be used on maps, use map.merge instead',
    m017: 'all arguments of extendObservable should be objects',
    m018:
      'extending an object with another observable (object) is not supported. Please construct an explicit propertymap, using `toJS` if need. See issue #540',
    m019:
      '[mobx.isObservable] isObservable(object, propertyName) is not supported for arrays and maps. Use map.has or array.length instead.',
    m020: 'modifiers can only be used for individual object properties',
    m021: 'observable expects zero or one arguments',
    m022: '@observable can not be used on getters, use @computed instead',
    m024:
      'whyRun() can only be used if a derivation is active, or by passing an computed value / reaction explicitly. If you invoked whyRun from inside a computation; the computation is currently suspended but re-evaluating because somebody requested its value.',
    m025: 'whyRun can only be used on reactions and computed values',
    m026: '`action` can only be invoked on functions',
    m028: 'It is not allowed to set `useStrict` when a derivation is running',
    m029:
      "INTERNAL ERROR only onBecomeUnobserved shouldn't be called twice in a row",
    m030a:
      'Since strict-mode is enabled, changing observed observable values outside actions is not allowed. Please wrap the code in an `action` if this change is intended. Tried to modify: ',
    m030b:
      'Side effects like changing state are not allowed at this point. Are you trying to modify state from, for example, the render function of a React component? Tried to modify: ',
    m031:
      'Computed values are not allowed to cause side effects by changing observables that are already being observed. Tried to modify: ',
    m032:
      "* This computation is suspended (not in use by any reaction) and won't run automatically.\n\tDidn't expect this computation to be suspended at this point?\n\t  1. Make sure this computation is used by a reaction (reaction, autorun, observer).\n\t  2. Check whether you are using this computation synchronously (in the same stack as they reaction that needs it).",
    m033:
      "`observe` doesn't support the fire immediately property for observable maps.",
    m034:
      '`mobx.map` is deprecated, use `new ObservableMap` or `mobx.observable.map` instead',
    m035: 'Cannot make the designated object observable; it is not extensible',
    m036: 'It is not possible to get index atoms from arrays',
    m037:
      'Hi there! I\'m sorry you have just run into an exception.\nIf your debugger ends up here, know that some reaction (like the render() of an observer component, autorun or reaction)\nthrew an exception and that mobx caught it, to avoid that it brings the rest of your application down.\nThe original cause of the exception (the code that caused this reaction to run (again)), is still in the stack.\n\nHowever, more interesting is the actual stack trace of the error itself.\nHopefully the error is an instanceof Error, because in that case you can inspect the original stack of the error from where it was thrown.\nSee `error.stack` property, or press the very subtle "(...)" link you see near the console.error message that probably brought you here.\nThat stack is more interesting than the stack of this console.error itself.\n\nIf the exception you see is an exception you created yourself, make sure to use `throw new Error("Oops")` instead of `throw "Oops"`,\nbecause the javascript environment will only preserve the original stack trace in the first form.\n\nYou can also make sure the debugger pauses the next time this very same exception is thrown by enabling "Pause on caught exception".\n(Note that it might pause on many other, unrelated exception as well).\n\nIf that all doesn\'t help you out, feel free to open an issue https://github.com/mobxjs/mobx/issues!\n',
    m038:
      "Missing items in this list?\n    1. Check whether all used values are properly marked as observable (use isObservable to verify)\n    2. Make sure you didn't dereference values too early. MobX observes props, not primitives. E.g: use 'person.name' instead of 'name' in your computation.\n"
  },
  bn = k(
    function(e, t, n, r, o) {
      var i = r && 1 === r.length ? r[0] : n.name || t || '<unnamed action>'
      ke(e, t, yn(i, n))
    },
    function(e) {
      return this[e]
    },
    function() {
      xe(!1, x('m001'))
    },
    !1,
    !0
  ),
  mn = k(
    function(e, t, n) {
      M(e, t, n)
    },
    function(e) {
      return this[e]
    },
    function() {
      xe(!1, x('m001'))
    },
    !1,
    !1
  ),
  yn = function(e, t, n, r) {
    return 1 === arguments.length && 'function' == typeof e
      ? w(e.name || '<unnamed action>', e)
      : 2 === arguments.length && 'function' == typeof t
        ? w(e, t)
        : 1 === arguments.length && 'string' == typeof e
          ? L(e)
          : L(t).apply(null, arguments)
  }
yn.bound = function(e, t, n) {
  if ('function' == typeof e) {
    var r = w('<not yet bound action>', e)
    return (r.autoBind = !0), r
  }
  return mn.apply(null, arguments)
}
var gn = { identity: N, structural: $, default: B },
  xn = (function() {
    function e(e, t, n, r, o) {
      ;(this.derivation = e),
        (this.scope = t),
        (this.equals = n),
        (this.dependenciesState = exports.IDerivationState.NOT_TRACKING),
        (this.observing = []),
        (this.newObserving = null),
        (this.isPendingUnobservation = !1),
        (this.observers = []),
        (this.observersIndexes = {}),
        (this.diffValue = 0),
        (this.runId = 0),
        (this.lastAccessedBy = 0),
        (this.lowestObserverState = exports.IDerivationState.UP_TO_DATE),
        (this.unboundDepsCount = 0),
        (this.__mapid = '#' + ye()),
        (this.value = new qn(null)),
        (this.isComputing = !1),
        (this.isRunningSetter = !1),
        (this.isTracing = Jn.NONE),
        (this.name = r || 'ComputedValue@' + ye()),
        o && (this.setter = w(r + '-setter', o))
    }
    return (
      (e.prototype.onBecomeStale = function() {
        pt(this)
      }),
      (e.prototype.onBecomeUnobserved = function() {
        xt(this), (this.value = void 0)
      }),
      (e.prototype.get = function() {
        xe(
          !this.isComputing,
          'Cycle detected in computation ' + this.name,
          this.derivation
        ),
          0 === zn.inBatch
            ? (at(),
              vt(this) &&
                (this.isTracing !== Jn.NONE &&
                  console.log(
                    "[mobx.trace] '" +
                      this.name +
                      "' is being read outside a reactive context and doing a full recompute"
                  ),
                (this.value = this.computeValue(!1))),
              st())
            : (ut(this), vt(this) && this.trackAndCompute() && lt(this))
        var e = this.value
        if (dt(e)) throw e.cause
        return e
      }),
      (e.prototype.peek = function() {
        var e = this.computeValue(!1)
        if (dt(e)) throw e.cause
        return e
      }),
      (e.prototype.set = function(e) {
        if (this.setter) {
          xe(
            !this.isRunningSetter,
            "The setter of computed value '" +
              this.name +
              "' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?"
          ),
            (this.isRunningSetter = !0)
          try {
            this.setter.call(this.scope, e)
          } finally {
            this.isRunningSetter = !1
          }
        } else
          xe(
            !1,
            "[ComputedValue '" +
              this.name +
              "'] It is not possible to assign a new value to a computed value."
          )
      }),
      (e.prototype.trackAndCompute = function() {
        s() && u({ object: this.scope, type: 'compute', fn: this.derivation })
        var e = this.value,
          t = this.dependenciesState === exports.IDerivationState.NOT_TRACKING,
          n = (this.value = this.computeValue(!0))
        return t || dt(e) || dt(n) || !this.equals(e, n)
      }),
      (e.prototype.computeValue = function(e) {
        ;(this.isComputing = !0), zn.computationDepth++
        var t
        if (e) t = yt(this, this.derivation, this.scope)
        else
          try {
            t = this.derivation.call(this.scope)
          } catch (e) {
            t = new qn(e)
          }
        return zn.computationDepth--, (this.isComputing = !1), t
      }),
      (e.prototype.observe = function(e, t) {
        var n = this,
          r = !0,
          o = void 0
        return U(function() {
          var i = n.get()
          if (!r || t) {
            var a = _t()
            e({ type: 'update', object: n, newValue: i, oldValue: o }), Ot(a)
          }
          ;(r = !1), (o = i)
        })
      }),
      (e.prototype.toJSON = function() {
        return this.get()
      }),
      (e.prototype.toString = function() {
        return this.name + '[' + this.derivation.toString() + ']'
      }),
      (e.prototype.valueOf = function() {
        return Ge(this.get())
      }),
      (e.prototype.whyRun = function() {
        var e = Boolean(zn.trackingDerivation),
          t = Oe(this.isComputing ? this.newObserving : this.observing).map(
            function(e) {
              return e.name
            }
          ),
          n = Oe(
            nt(this).map(function(e) {
              return e.name
            })
          )
        return (
          "\nWhyRun? computation '" +
          this.name +
          "':\n * Running because: " +
          (e
            ? '[active] the value of this computation is needed by a reaction'
            : this.isComputing
              ? '[get] The value of this computed was requested outside a reaction'
              : '[idle] not running at the moment') +
          '\n' +
          (this.dependenciesState === exports.IDerivationState.NOT_TRACKING
            ? x('m032')
            : ' * This computation will re-run if any of the following observables changes:\n    ' +
              Se(t) +
              '\n    ' +
              (this.isComputing && e
                ? ' (... or any observable accessed during the remainder of the current run)'
                : '') +
              '\n    ' +
              x('m038') +
              '\n\n  * If the outcome of this computation changes, the following observers will be re-run:\n    ' +
              Se(n) +
              '\n')
        )
      }),
      e
    )
  })()
xn.prototype[ze()] = xn.prototype.valueOf
var wn = Ce('ComputedValue', xn),
  _n = (function() {
    function e(e, t) {
      ;(this.target = e),
        (this.name = t),
        (this.values = {}),
        (this.changeListeners = null),
        (this.interceptors = null)
    }
    return (
      (e.prototype.observe = function(e, t) {
        return (
          xe(
            !0 !== t,
            "`observe` doesn't support the fire immediately property for observable objects."
          ),
          i(this, e)
        )
      }),
      (e.prototype.intercept = function(e) {
        return n(this, e)
      }),
      e
    )
  })(),
  On = {},
  Sn = {},
  An = Ce('ObservableObjectAdministration', _n),
  In = ne(le),
  jn = ne(pe),
  Dn = ne(fe),
  Tn = ne(he),
  kn = ne(de),
  En = {
    box: function(e, t) {
      return arguments.length > 2 && se('box'), new hn(e, le, t)
    },
    shallowBox: function(e, t) {
      return arguments.length > 2 && se('shallowBox'), new hn(e, fe, t)
    },
    array: function(e, t) {
      return arguments.length > 2 && se('array'), new cn(e, le, t)
    },
    shallowArray: function(e, t) {
      return arguments.length > 2 && se('shallowArray'), new cn(e, fe, t)
    },
    map: function(e, t) {
      return arguments.length > 2 && se('map'), new Ln(e, le, t)
    },
    shallowMap: function(e, t) {
      return arguments.length > 2 && se('shallowMap'), new Ln(e, fe, t)
    },
    object: function(e, t) {
      arguments.length > 2 && se('object')
      var n = {}
      return H(n, t), re(n, e), n
    },
    shallowObject: function(e, t) {
      arguments.length > 2 && se('shallowObject')
      var n = {}
      return H(n, t), oe(n, e), n
    },
    ref: function() {
      return arguments.length < 2
        ? ce(fe, arguments[0])
        : Dn.apply(null, arguments)
    },
    shallow: function() {
      return arguments.length < 2
        ? ce(pe, arguments[0])
        : jn.apply(null, arguments)
    },
    deep: function() {
      return arguments.length < 2
        ? ce(le, arguments[0])
        : In.apply(null, arguments)
    },
    struct: function() {
      return arguments.length < 2
        ? ce(he, arguments[0])
        : Tn.apply(null, arguments)
    }
  },
  Rn = ae
Object.keys(En).forEach(function(e) {
  return (Rn[e] = En[e])
}),
  (Rn.deep.struct = Rn.struct),
  (Rn.ref.struct = function() {
    return arguments.length < 2
      ? ce(de, arguments[0])
      : kn.apply(null, arguments)
  })
var Vn = {},
  Ln = (function() {
    function e(e, t, n) {
      void 0 === t && (t = le),
        void 0 === n && (n = 'ObservableMap@' + ye()),
        (this.enhancer = t),
        (this.name = n),
        (this.$mobx = Vn),
        (this._data = Object.create(null)),
        (this._hasMap = Object.create(null)),
        (this._keys = new cn(void 0, fe, this.name + '.keys()', !0)),
        (this.interceptors = null),
        (this.changeListeners = null),
        (this.dehancer = void 0),
        this.merge(e)
    }
    return (
      (e.prototype._has = function(e) {
        return void 0 !== this._data[e]
      }),
      (e.prototype.has = function(e) {
        return (
          !!this.isValidKey(e) &&
          ((e = '' + e),
          this._hasMap[e]
            ? this._hasMap[e].get()
            : this._updateHasMapEntry(e, !1).get())
        )
      }),
      (e.prototype.set = function(e, n) {
        this.assertValidKey(e), (e = '' + e)
        var o = this._has(e)
        if (t(this)) {
          var i = r(this, {
            type: o ? 'update' : 'add',
            object: this,
            newValue: n,
            name: e
          })
          if (!i) return this
          n = i.newValue
        }
        return o ? this._updateValue(e, n) : this._addValue(e, n), this
      }),
      (e.prototype.delete = function(e) {
        var n = this
        if ((this.assertValidKey(e), (e = '' + e), t(this))) {
          var i = r(this, { type: 'delete', object: this, name: e })
          if (!i) return !1
        }
        if (this._has(e)) {
          var u = s(),
            p = o(this),
            i =
              p || u
                ? {
                    type: 'delete',
                    object: this,
                    oldValue: this._data[e].value,
                    name: e
                  }
                : null
          return (
            u && c(i),
            ve(function() {
              n._keys.remove(e),
                n._updateHasMapEntry(e, !1),
                n._data[e].setNewValue(void 0),
                (n._data[e] = void 0)
            }),
            p && a(this, i),
            u && l(),
            !0
          )
        }
        return !1
      }),
      (e.prototype._updateHasMapEntry = function(e, t) {
        var n = this._hasMap[e]
        return (
          n
            ? n.setNewValue(t)
            : (n = this._hasMap[e] = new hn(
                t,
                fe,
                this.name + '.' + e + '?',
                !1
              )),
          n
        )
      }),
      (e.prototype._updateValue = function(e, t) {
        var n = this._data[e]
        if ((t = n.prepareNewValue(t)) !== fn) {
          var r = s(),
            i = o(this),
            u =
              i || r
                ? {
                    type: 'update',
                    object: this,
                    oldValue: n.value,
                    name: e,
                    newValue: t
                  }
                : null
          r && c(u), n.setNewValue(t), i && a(this, u), r && l()
        }
      }),
      (e.prototype._addValue = function(e, t) {
        var n = this
        ve(function() {
          var r = (n._data[e] = new hn(t, n.enhancer, n.name + '.' + e, !1))
          ;(t = r.value), n._updateHasMapEntry(e, !0), n._keys.push(e)
        })
        var r = s(),
          i = o(this),
          u =
            i || r ? { type: 'add', object: this, name: e, newValue: t } : null
        r && c(u), i && a(this, u), r && l()
      }),
      (e.prototype.get = function(e) {
        return (
          (e = '' + e),
          this.has(e)
            ? this.dehanceValue(this._data[e].get())
            : this.dehanceValue(void 0)
        )
      }),
      (e.prototype.dehanceValue = function(e) {
        return void 0 !== this.dehancer ? this.dehancer(e) : e
      }),
      (e.prototype.keys = function() {
        return h(this._keys.slice())
      }),
      (e.prototype.values = function() {
        return h(this._keys.map(this.get, this))
      }),
      (e.prototype.entries = function() {
        var e = this
        return h(
          this._keys.map(function(t) {
            return [t, e.get(t)]
          })
        )
      }),
      (e.prototype.forEach = function(e, t) {
        var n = this
        this.keys().forEach(function(r) {
          return e.call(t, n.get(r), r, n)
        })
      }),
      (e.prototype.merge = function(e) {
        var t = this
        return (
          Pn(e) && (e = e.toJS()),
          ve(function() {
            Ie(e)
              ? Object.keys(e).forEach(function(n) {
                  return t.set(n, e[n])
                })
              : Array.isArray(e)
                ? e.forEach(function(e) {
                    var n = e[0],
                      r = e[1]
                    return t.set(n, r)
                  })
                : Be(e)
                  ? e.forEach(function(e, n) {
                      return t.set(n, e)
                    })
                  : null !== e &&
                    void 0 !== e &&
                    ge('Cannot initialize map from ' + e)
          }),
          this
        )
      }),
      (e.prototype.clear = function() {
        var e = this
        ve(function() {
          wt(function() {
            e.keys().forEach(e.delete, e)
          })
        })
      }),
      (e.prototype.replace = function(e) {
        var t = this
        return (
          ve(function() {
            var n = Ue(e)
            t
              .keys()
              .filter(function(e) {
                return -1 === n.indexOf(e)
              })
              .forEach(function(e) {
                return t.delete(e)
              }),
              t.merge(e)
          }),
          this
        )
      }),
      Object.defineProperty(e.prototype, 'size', {
        get: function() {
          return this._keys.length
        },
        enumerable: !0,
        configurable: !0
      }),
      (e.prototype.toJS = function() {
        var e = this,
          t = {}
        return (
          this.keys().forEach(function(n) {
            return (t[n] = e.get(n))
          }),
          t
        )
      }),
      (e.prototype.toJSON = function() {
        return this.toJS()
      }),
      (e.prototype.isValidKey = function(e) {
        return (
          null !== e &&
          void 0 !== e &&
          ('string' == typeof e ||
            'number' == typeof e ||
            'boolean' == typeof e)
        )
      }),
      (e.prototype.assertValidKey = function(e) {
        if (!this.isValidKey(e))
          throw new Error(
            "[mobx.map] Invalid key: '" +
              e +
              "', only strings, numbers and booleans are accepted as key in observable maps."
          )
      }),
      (e.prototype.toString = function() {
        var e = this
        return (
          this.name +
          '[{ ' +
          this.keys()
            .map(function(t) {
              return t + ': ' + e.get(t)
            })
            .join(', ') +
          ' }]'
        )
      }),
      (e.prototype.observe = function(e, t) {
        return xe(!0 !== t, x('m033')), i(this, e)
      }),
      (e.prototype.intercept = function(e) {
        return n(this, e)
      }),
      e
    )
  })()
d(Ln.prototype, function() {
  return this.entries()
})
var Pn = Ce('ObservableMap', Ln),
  Cn = []
Object.freeze(Cn)
var Mn = [],
  Nn = function() {},
  $n = Object.prototype.hasOwnProperty,
  Bn = ['mobxGuid', 'resetId', 'spyListeners', 'strictMode', 'runId'],
  Un = (function() {
    function e() {
      ;(this.version = 5),
        (this.trackingDerivation = null),
        (this.computationDepth = 0),
        (this.runId = 0),
        (this.mobxGuid = 0),
        (this.inBatch = 0),
        (this.pendingUnobservations = []),
        (this.pendingReactions = []),
        (this.isRunningReactions = !1),
        (this.allowStateChanges = !0),
        (this.strictMode = !1),
        (this.resetId = 0),
        (this.spyListeners = []),
        (this.globalReactionErrorHandlers = [])
    }
    return e
  })(),
  zn = new Un(),
  Gn = !1,
  Kn = !1,
  Hn = !1,
  Wn = me()
Wn.__mobxInstanceCount
  ? (Wn.__mobxInstanceCount++,
    setTimeout(function() {
      Gn ||
        Kn ||
        Hn ||
        ((Hn = !0),
        console.warn(
          '[mobx] Warning: there are multiple mobx instances active. This might lead to unexpected results. See https://github.com/mobxjs/mobx/issues/1082 for details.'
        ))
    }))
  : (Wn.__mobxInstanceCount = 1),
  (function(e) {
    ;(e[(e.NOT_TRACKING = -1)] = 'NOT_TRACKING'),
      (e[(e.UP_TO_DATE = 0)] = 'UP_TO_DATE'),
      (e[(e.POSSIBLY_STALE = 1)] = 'POSSIBLY_STALE'),
      (e[(e.STALE = 2)] = 'STALE')
  })(exports.IDerivationState || (exports.IDerivationState = {}))
var Jn
!(function(e) {
  ;(e[(e.NONE = 0)] = 'NONE'),
    (e[(e.LOG = 1)] = 'LOG'),
    (e[(e.BREAK = 2)] = 'BREAK')
})(Jn || (Jn = {}))
var qn = (function() {
    function e(e) {
      this.cause = e
    }
    return e
  })(),
  Yn = (function() {
    function e(e, t) {
      void 0 === e && (e = 'Reaction@' + ye()),
        (this.name = e),
        (this.onInvalidate = t),
        (this.observing = []),
        (this.newObserving = []),
        (this.dependenciesState = exports.IDerivationState.NOT_TRACKING),
        (this.diffValue = 0),
        (this.runId = 0),
        (this.unboundDepsCount = 0),
        (this.__mapid = '#' + ye()),
        (this.isDisposed = !1),
        (this._isScheduled = !1),
        (this._isTrackPending = !1),
        (this._isRunning = !1),
        (this.isTracing = Jn.NONE)
    }
    return (
      (e.prototype.onBecomeStale = function() {
        this.schedule()
      }),
      (e.prototype.schedule = function() {
        this._isScheduled ||
          ((this._isScheduled = !0), zn.pendingReactions.push(this), Et())
      }),
      (e.prototype.isScheduled = function() {
        return this._isScheduled
      }),
      (e.prototype.runReaction = function() {
        this.isDisposed ||
          (at(),
          (this._isScheduled = !1),
          vt(this) &&
            ((this._isTrackPending = !0),
            this.onInvalidate(),
            this._isTrackPending &&
              s() &&
              u({ object: this, type: 'scheduled-reaction' })),
          st())
      }),
      (e.prototype.track = function(e) {
        at()
        var t,
          n = s()
        n && ((t = Date.now()), c({ object: this, type: 'reaction', fn: e })),
          (this._isRunning = !0)
        var r = yt(this, e, void 0)
        ;(this._isRunning = !1),
          (this._isTrackPending = !1),
          this.isDisposed && xt(this),
          dt(r) && this.reportExceptionInDerivation(r.cause),
          n && l({ time: Date.now() - t }),
          st()
      }),
      (e.prototype.reportExceptionInDerivation = function(e) {
        var t = this
        if (this.errorHandler) return void this.errorHandler(e, this)
        var n =
            "[mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: '" +
            this,
          r = x('m037')
        console.error(n || r, e),
          s() && u({ type: 'error', message: n, error: e, object: this }),
          zn.globalReactionErrorHandlers.forEach(function(n) {
            return n(e, t)
          })
      }),
      (e.prototype.dispose = function() {
        this.isDisposed ||
          ((this.isDisposed = !0), this._isRunning || (at(), xt(this), st()))
      }),
      (e.prototype.getDisposer = function() {
        var e = this.dispose.bind(this)
        return (e.$mobx = this), (e.onError = Tt), e
      }),
      (e.prototype.toString = function() {
        return 'Reaction[' + this.name + ']'
      }),
      (e.prototype.whyRun = function() {
        var e = Oe(this._isRunning ? this.newObserving : this.observing).map(
          function(e) {
            return e.name
          }
        )
        return (
          "\nWhyRun? reaction '" +
          this.name +
          "':\n * Status: [" +
          (this.isDisposed
            ? 'stopped'
            : this._isRunning
              ? 'running'
              : this.isScheduled() ? 'scheduled' : 'idle') +
          ']\n * This reaction will re-run if any of the following observables changes:\n    ' +
          Se(e) +
          '\n    ' +
          (this._isRunning
            ? ' (... or any observable accessed during the remainder of the current run)'
            : '') +
          '\n\t' +
          x('m038') +
          '\n'
        )
      }),
      (e.prototype.trace = function(e) {
        void 0 === e && (e = !1), jt(this, e)
      }),
      e
    )
  })(),
  Fn = 100,
  Xn = function(e) {
    return e()
  },
  Qn = Ce('Reaction', Yn),
  Zn = Nt(gn.default),
  er = Nt(gn.structural),
  tr = function(e, t, n) {
    if ('string' == typeof t) return Zn.apply(null, arguments)
    xe('function' == typeof e, x('m011')), xe(arguments.length < 3, x('m012'))
    var r = 'object' == typeof t ? t : {}
    r.setter = 'function' == typeof t ? t : r.setter
    var o = r.equals
      ? r.equals
      : r.compareStructural || r.struct ? gn.structural : gn.default
    return new xn(e, r.context, o, r.name || e.name || '', r.setter)
  }
;(tr.struct = er), (tr.equals = Nt)
var nr = {
    allowStateChanges: j,
    deepEqual: Pe,
    getAtom: qe,
    getDebugName: Fe,
    getDependencyTree: Xe,
    getAdministration: Ye,
    getGlobalState: We,
    getObserverTree: Ze,
    interceptReads: Ft,
    isComputingDerivation: bt,
    isSpyEnabled: s,
    onReactionError: kt,
    reserveArrayBuffer: y,
    resetGlobalState: Je,
    isolateGlobalState: Ke,
    shareGlobalState: He,
    spyReport: u,
    spyReportEnd: l,
    spyReportStart: c,
    setReactionScheduler: Vt
  },
  rr = {
    Reaction: Yn,
    untracked: wt,
    Atom: Zt,
    BaseAtom: Qt,
    useStrict: A,
    isStrictModeEnabled: I,
    spy: p,
    comparer: gn,
    asReference: Lt,
    asFlat: Ct,
    asStructure: Pt,
    asMap: Mt,
    isModifierDescriptor: ue,
    isObservableObject: ee,
    isBoxedObservable: dn,
    isObservableArray: g,
    ObservableMap: Ln,
    isObservableMap: Pn,
    map: be,
    transaction: ve,
    observable: Rn,
    computed: tr,
    isObservable: te,
    isComputed: $t,
    extendObservable: re,
    extendShallowObservable: oe,
    observe: Bt,
    intercept: Gt,
    autorun: U,
    autorunAsync: G,
    when: z,
    reaction: K,
    action: yn,
    isAction: C,
    runInAction: P,
    expr: Wt,
    toJS: Jt,
    createTransformer: qt,
    whyRun: It,
    isArrayLike: Ne,
    extras: nr
  },
  or = !1,
  ir = function(e) {
    var t = rr[e]
    Object.defineProperty(rr, e, {
      get: function() {
        return (
          or ||
            ((or = !0),
            console.warn(
              "Using default export (`import mobx from 'mobx'`) is deprecated and won’t work in mobx@4.0.0\nUse `import * as mobx from 'mobx'` instead"
            )),
          t
        )
      }
    })
  }
for (var ar in rr) ir(ar)
'object' == typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ &&
  __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({ spy: p, extras: nr }),
  (exports.extras = nr),
  (exports.default = rr),
  (exports.Reaction = Yn),
  (exports.untracked = wt),
  (exports.Atom = Zt),
  (exports.BaseAtom = Qt),
  (exports.useStrict = A),
  (exports.isStrictModeEnabled = I),
  (exports.spy = p),
  (exports.comparer = gn),
  (exports.asReference = Lt),
  (exports.asFlat = Ct),
  (exports.asStructure = Pt),
  (exports.asMap = Mt),
  (exports.isModifierDescriptor = ue),
  (exports.isObservableObject = ee),
  (exports.isBoxedObservable = dn),
  (exports.isObservableArray = g),
  (exports.ObservableMap = Ln),
  (exports.isObservableMap = Pn),
  (exports.map = be),
  (exports.transaction = ve),
  (exports.observable = Rn),
  (exports.computed = tr),
  (exports.isObservable = te),
  (exports.isComputed = $t),
  (exports.extendObservable = re),
  (exports.extendShallowObservable = oe),
  (exports.observe = Bt),
  (exports.intercept = Gt),
  (exports.autorun = U),
  (exports.autorunAsync = G),
  (exports.when = z),
  (exports.reaction = K),
  (exports.action = yn),
  (exports.isAction = C),
  (exports.runInAction = P),
  (exports.expr = Wt),
  (exports.toJS = Jt),
  (exports.createTransformer = qt),
  (exports.whyRun = It),
  (exports.trace = jt),
  (exports.isArrayLike = Ne)
//# sourceMappingURL=lib/mobx.min.js.map
